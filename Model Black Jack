############### Blackjack Project #####################

#Difficulty Normal ðŸ˜Ž: Use all Hints below to complete the project.
#Difficulty Hard ðŸ¤”: Use only Hints 1, 2, 3 to complete the project.
#Difficulty Extra Hard ðŸ˜­: Only use Hints 1 & 2 to complete the project.
#Difficulty Expert ðŸ¤¯: Only use Hint 1 to complete the project.

############### Our Blackjack House Rules #####################

## The deck is unlimited in size. 
## There are no jokers. 
## The Jack/Queen/King all count as 10.
## The the Ace can count as 11 or 1.
## Use the following list as the deck of cards:
## cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
## The cards in the list have equal probability of being drawn.
## Cards are not removed from the deck as they are drawn.
## The computer is the dealer.

logo = """
.------.            _     _            _    _            _    
|A_  _ |.          | |   | |          | |  (_)          | |   
|( \/ ).-----.     | |__ | | __ _  ___| | ___  __ _  ___| | __
| \  /|K /\  |     | '_ \| |/ _` |/ __| |/ / |/ _` |/ __| |/ /
|  \/ | /  \ |     | |_) | | (_| | (__|   <| | (_| | (__|   < 
`-----| \  / |     |_.__/|_|\__,_|\___|_|\_\ |\__,_|\___|_|\_\\
      |  \/ K|                            _/ |                
      `------'                           |__/           
"""

##################### Hints #####################

#Hint 1: Go to this website and try out the Blackjack game: 
#   https://games.washingtonpost.com/games/blackjack/
#Then try out the completed Blackjack project here: 
#   http://blackjack-final.appbrewery.repl.run

#Hint 2: Read this breakdown of program requirements: 
#   http://listmoz.com/view/6h34DJpvJBFVRlZfJvxF
#Then try to create your own flowchart for the program.

#Hint 3: Download and read this flow chart I've created: 
#   https://drive.google.com/uc?export=download&id=1rDkiHCrhaf9eX7u7yjM1qwSuyEk-rPnt

#Hint 4: Create a deal_card() function that uses the List below to *return* a random card.
#11 is the Ace.

import random
from replit import clear
from art import logo

def deal_card():
    """Returns a random card from the deck. 11 stands for an ace."""
    deck = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
    card = random.choice(deck)
    return card


#Hint 13: Create a function called compare() and pass in the user_score and computer_score. If the computer and user both have the same score, then it's a draw. If the computer has a blackjack (0), then the user loses. If the user has a blackjack (0), then the user wins. If the user_score is over 21, then the user loses. If the computer_score is over 21, then the computer loses. If none of the above, then the player with the highest score wins.

def compare(player_score, dealer_score):
    if player_score == dealer_score:
        return "\nit's a draw"
    elif dealer_score == 0:
        return "\nYOU LOSE!!! The dealer has a Black Jack."
    elif player_score == 0:
        return "\nBlack Jack, YOU WIN!!!"
    elif player_score > 21:
        return "\nYou went over, you lose!"
    elif dealer_score > 21:
        return "\nThe dealer went over, you win!"
    elif player_score > dealer_score: # learning moment: you thought to declare a new variable 'winner' and use the max() function
        return "\nYou WIN!!!"
    else:
        return "\nYou LOSE!!!"


#Hint 6: Create a function called calculate_score() that takes a List of cards as input 
#and returns the score. 
#Look up the sum() function to help you do this.

def calculate_score(cards):
    """Takes a list of cards and returns the score calculated from adding the cards. Returns 0 if Black Jack (11 + 10 value card) is present"""
    
    score = sum(cards)
    
    #Hint 7: Inside calculate_score() check for a blackjack (a hand with only 2 cards: ace + 10) and return 0 instead of the actual score. 0 will represent a blackjack in our game.
    if len(cards) == 2 and score == 21:
        return 0

    #Hint 8: Inside calculate_score() check for an 11 (ace). If the score is already over 21, remove the 11 and replace it with a 1. You might need to look up append() and remove().

    if score > 21 and 11 in cards:
        cards.remove(11)
        cards.append(1)
        calculate_score(cards)
        return score
    
    return score

def play_game():

    print(logo)
    
    #Hint 5: Deal the user and computer 2 cards each using deal_card() and append().
    
    player_cards = []
    dealer_cards = []
    game_over = False
    
    for _ in range(2):
        player_cards.append(deal_card())
        dealer_cards.append(deal_card())
    
    #Hint 11: The score will need to be rechecked with every new card drawn and the checks in Hint 9 need to be repeated until the game ends.
    
    while not game_over:    
        #Hint 9: Call calculate_score(). If the computer or the user has a blackjack (0) or if the user's score is over 21, then the game ends.
        
        player_score = calculate_score(cards=player_cards)
        dealer_score = calculate_score(cards=dealer_cards)
        
        print(f"\n    Your cards: {player_cards} Your score: {player_score}")
        print(f"\n    Dealer's first card: {dealer_cards[0]}")
        
        # the following if-statement catches a BlackJack or player over before we use the function compare(ps, ds)
        
        if dealer_score == 0 or player_score == 0 or player_score > 21:
            game_over = True
        
        #Hint 10: If the game has not ended, ask the user if they want to draw another card. If yes, then use the deal_card() function to add another card to the user_cards List. If no, then the game has ended.
        else:
            want_card = input("\nHit ('y') or Stand ('n')? ")
            if want_card == "y":
                player_cards.append(deal_card())
            else:
                game_over = True 
    
    
    
    #Hint 12: Once the user is done, it's time to let the computer play. The computer should keep drawing cards as long as it has a score less than 17.
    
    while dealer_score < 17 and dealer_score != 0:
        dealer_cards.append(deal_card())
        dealer_score = calculate_score(dealer_cards)
    
    print(f"\n Your final cards: {player_cards} Your final score: {player_score}")
    print(f"\n Dealer's final cards: {dealer_cards} Dealer's final score: {dealer_score}")
    
    print(compare(player_score=player_score, dealer_score=dealer_score))

#Hint 14: Ask the user if they want to restart the game. If they answer yes, clear the console and start a new game of blackjack and show the logo from art.py.

while input("\nDo you want to play a game of Black Jack? Yes ('y') or No ('n')? ") == "y":
    clear()
    play_game()
