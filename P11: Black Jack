# UNFINISHED (just have to add dual ace functionality)

import random

logo = """
.------.            _     _            _    _            _    
|A_  _ |.          | |   | |          | |  (_)          | |   
|( \/ ).-----.     | |__ | | __ _  ___| | ___  __ _  ___| | __
| \  /|K /\  |     | '_ \| |/ _` |/ __| |/ / |/ _` |/ __| |/ /
|  \/ | /  \ |     | |_) | | (_| | (__|   <| | (_| | (__|   < 
`-----| \  / |     |_.__/|_|\__,_|\___|_|\_\ |\__,_|\___|_|\_\\
      |  \/ K|                            _/ |                
      `------'                           |__/           
"""

choice = input("Do you want to play BlackJack? 'y' for yes, 'n' for no: ")

deck = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10]

if choice == 'y':
    end = False

    print(logo)
    player_cards = [random.choice(deck), random.choice(deck)]
    player_sum = sum(player_cards)

    if player_sum > 21:
        player_cards.remove(11)
        player_cards.append(1)
    
    dealer_cards = [random.choice(deck)]
    dealer_sum = sum(dealer_cards)
    
    ################################################################

    # (no recursion) nothing in it = NII
    # (recursion) in it = II
    
    #1 When player wins, NII
    def player_wins():
        global player_cards
        global player_sum
        global dealer_cards
        global dealer_sum
        if (len(player_cards) == 2) and (player_sum == 21):
            print(f"Your Final Cards: {player_cards}, Your Final Score: {player_sum}")
            print(f"Dealer's Final Cards: {dealer_cards}, Dealer's Final Score: {dealer_sum}")
            print("BLACKJACK!!! YOU WIN!!!")
            
        else:
            print(f"Your Final Cards: {player_cards}, Your Final Score: {player_sum}")
            print(f"Dealer's Final Cards: {dealer_cards}, Dealer's Final Score: {dealer_sum}")
            print("YOU WIN!!!")

    #2 When dealer wins or player loses, II
    def dealer_wins():
        global player_cards
        global player_sum
        global dealer_cards
        global dealer_sum
        if (len(dealer_cards) == 2) and (dealer_sum == 21):
            print(f"Your Final Cards: {player_cards}, Your Final Score: {player_sum}")
            print(f"Dealer's Final Cards: {dealer_cards}, Dealer's Final Score: {dealer_sum}")
            print("Dealer has a BLACKJACK!!! YOU LOSE!")

        else:
            print(f"Your Final Cards: {player_cards}, Your Final Score: {player_sum}")
            print(f"Dealer's Final Cards: {dealer_cards}, Dealer's Final Score: {dealer_sum}")
            print("YOU LOSE! Dealer wins.")

    #3 When it's a tie, NII
    def draw():
        global player_cards
        global player_sum
        global dealer_cards
        global dealer_sum
        print(f"Your Cards: {player_cards}, Your Score: {player_sum}")
        print(f"Dealer's Cards: {dealer_cards}, Dealer's Score: {dealer_sum}")
        print("It's a TIE!!! You don't lose your money hehe.")
    
    #4 When player asks for more cards, player_sum < 21, NII
    def player_add():
        global player_cards
        player_cards.append(random.choice(deck))
    
    #5 When player says they don't want more cards or if player loses, NII
    def dealer_add():
        global dealer_cards
        global dealer_sum
        while dealer_sum < 17:
            dealer_cards.append(random.choice(deck))
            dealer_sum = sum(dealer_cards)

    #6 When you need to check and assess the dealer's score, II
    def dealer_assess():
        global dealer_sum
        global end
        if dealer_sum < 17:
            dealer_add()
        elif dealer_sum == 21:
            dealer_wins()
            end = True
        elif dealer_sum > 21:
            player_wins()
            end = True
        elif ((dealer_sum >= 17) and (dealer_sum < 21)):
            deter = compare_cards()
            if deter == "player":
                player_wins()
                end = True
            elif deter == "dealer":
                dealer_wins()
                end = True

    #7 When you want the player to choose either hit 'y' or stand 'n', II
    def ask_to_add():
        x = input("Hit ('y') or Stand ('n'): ")
        if x == 'y':
            player_add()
        elif x == 'n':
            dealer_add()
            dealer_assess()
                # global dealer_cards
                # global dealer_sum
                # dealer_sum = sum(dealer_cards)

    #8 In the case where you need to compare the scores of the dealer and the player, as to what is closest to 21, II
    def compare_cards():
        in_game = [player_sum, dealer_sum]
        if player_sum != 21:
            if in_game[0] == in_game[1]:
                draw()
                global end
                end = True
            else:
                high = max(in_game)
                person = in_game.index(high)
                
                if person == 0:
                    winner = "player"
                else:
                    winner = "dealer"
                
                return winner

    #9 When you need to check and assess the player's score, II
    def player_assess():
        global player_sum
        global end
        if player_sum > 21:
            dealer_assess()
            dealer_wins()
            end = True
        elif player_sum < 21:
            ask_to_add()
        elif player_sum == 21:
            dealer_assess()
            player_wins()
            end = True
            
################################################################
    while not end:        
        dealer_sum = sum(dealer_cards)
        player_sum = sum(player_cards)

        print(f"Your Cards: {player_cards}, Your Score: {player_sum}")
        print(f"Dealer's Cards: {dealer_cards}, Dealer's Score: {dealer_sum}")

        player_assess()


