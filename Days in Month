# MY CODE (although I have a question as to how the code works if I use only the function name without the brackets in the "if" condition, I fixed it but I don't know why it is wrong)

def days_in_month(y, m):
    def is_leap(test_year):
        if test_year % 4 == 0:
            if test_year % 100 == 0:
                if test_year % 400 == 0:
                    return True
                else:
                    return False
            else:
                return True
        else:
            return False
    
    m -= 1

    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    month_days_l = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    if is_leap(test_year=y):
        return month_days_l[m]
    else:
        return month_days[m]   
  
# MODEL CODE

def is_leap(test_year):
    if test_year % 4 == 0:
        if test_year % 100 == 0:
            if test_year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False

def days_in_month(y, m):
    if m > 12 or m < 1:           
        return "Invalid Input"
    if y > 9999 or y < 1:
        return "Invalid Input"
    
    # The above is just code to accept only valid inputs
    
    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    
    if is_leap(test_year=y) and month == 2: # This helps to reduce the addition of another list
        return 29 # Practice in using the return keyword
    return month_days[m - 1] # Eliminates an extra line of code of reducing the value of "m"   
  
  
#ðŸš¨ Do NOT change any of the code below 
year = int(input("Enter a year: "))
month = int(input("Enter a month: "))
days = days_in_month(year, month)
print(days)


